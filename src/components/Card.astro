---
interface Props {
  title: string;
  body: string;
  href: string;
}

const { href, title, body } = Astro.props;
---

<li class="text-center mt-2 text-white grid">
  <input
    id="yt-url"
    class="rounded-md w-1/4 h-8 p-2 mx-auto text-gray-800 text-xl grid-cols-12"
  />
  <button
    id="download-btn"
    class="rounded-md w-1/6 h-12 mx-auto mt-3 mb-4 text-black font-semibold text-2xl bg-green-300 grid-cols-12"
    >Convert</button
  >
</li>

<script>
  const ytUrlInput: HTMLInputElement = document.getElementById(
    "yt-url"
  )! as HTMLInputElement;
  const downloadButton: HTMLButtonElement = document.getElementById(
    "download-btn"
  )! as HTMLButtonElement;
  let ytUrlValue: string = "";
  ytUrlInput.addEventListener("change", (ev: Event) => {
    const { target } = ev;
    if (target) {
      console.log(target);
      ytUrlValue = (target as HTMLInputElement).value;
    }
  });
  downloadButton.addEventListener("click", () => {
    if (ytUrlValue.length > 5) sendRequest(ytUrlValue);
  });

  async function sendRequest(url: string) {
    console.log(url);
    // Regular expression to extract the video ID
    const regex = /[?&]v=([^&]+)/;
    const match = url.match(regex);

    if (match) {
      const response: any = await fetch(`download/${match[1]}`);
      const blobby = await response.blob();
      const urlAudio = URL.createObjectURL(blobby);

      const audioElement = document.createElement("audio");
      audioElement.src = urlAudio;
      audioElement.controls = true;
	  audioElement.classList.add("mx-auto")
      document.body.appendChild(audioElement);

      const downloadLink = document.createElement("a");
      downloadLink.href = urlAudio;
      downloadLink.download = "muca.mp3"; // Set the desired filename here

      // Trigger a click event on the anchor element
      downloadLink.click();
    } else {
      console.log("Video ID not found in the URL.");
    }
  }
</script>
